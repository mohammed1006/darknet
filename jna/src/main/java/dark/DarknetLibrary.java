// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package dark;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class DarknetLibrary extends dark.DarknetLibraryConfig {
    static { Loader.load(); }

// Parsed from darknet.h

// #ifndef DARKNET_API
// #define DARKNET_API



// #if defined(DEBUG) && !defined(_CRTDBG_MAP_ALLOC)
// #define _CRTDBG_MAP_ALLOC
// #endif

// #include <stdlib.h>
// #include <stdio.h>
// #include <string.h>
// #include <stdint.h>
// #include <assert.h>
// #include <pthread.h>

// #ifndef LIB_API
// #ifdef LIB_EXPORTS
// #if defined(_MSC_VER)
public static native @MemberGetter int LIB_API();
public static final int LIB_API = LIB_API();
// #else
// #endif
// #else
// #if defined(_MSC_VER)
// #define LIB_API
// #else
// #define LIB_API
// #endif
// #endif
// #endif

public static final int SECRET_NUM = -1234;

// #ifdef GPU

// #include <cuda_runtime.h>
// #include <curand.h>
// #include <cublas_v2.h>

// #ifdef CUDNN
// #include <cudnn.h>
// #endif
// #endif

// #ifdef __cplusplus
// #endif

public static native int gpu_index(); public static native void gpu_index(int setter);

// option_list.h
public static class metadata extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public metadata() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public metadata(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public metadata(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public metadata position(long position) {
        return (metadata)super.position(position);
    }

    public native int classes(); public native metadata classes(int setter);
    public native @Cast("char*") BytePointer names(int i); public native metadata names(int i, BytePointer setter);
    public native @Cast("char**") PointerPointer names(); public native metadata names(PointerPointer setter);
}


// tree.h
public static class tree extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public tree() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public tree(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public tree(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public tree position(long position) {
        return (tree)super.position(position);
    }

    public native IntPointer leaf(); public native tree leaf(IntPointer setter);
    public native int n(); public native tree n(int setter);
    public native IntPointer parent(); public native tree parent(IntPointer setter);
    public native IntPointer child(); public native tree child(IntPointer setter);
    public native IntPointer group(); public native tree group(IntPointer setter);
    public native @Cast("char*") BytePointer name(int i); public native tree name(int i, BytePointer setter);
    public native @Cast("char**") PointerPointer name(); public native tree name(PointerPointer setter);

    public native int groups(); public native tree groups(int setter);
    public native IntPointer group_size(); public native tree group_size(IntPointer setter);
    public native IntPointer group_offset(); public native tree group_offset(IntPointer setter);
}


// activations.h
/** enum ACTIVATION */
public static final int
    LOGISTIC = 0, RELU = 1, RELIE = 2, LINEAR = 3, RAMP = 4, TANH = 5, PLSE = 6, LEAKY = 7, ELU = 8, LOGGY = 9, STAIR = 10, HARDTAN = 11, LHTAN = 12, SELU = 13, SWISH = 14, MISH = 15, NORM_CHAN = 16, NORM_CHAN_SOFTMAX = 17;

// parser.h
/** enum IOU_LOSS */
public static final int
    IOU = 0, GIOU = 1, MSE = 2, DIOU = 3, CIOU = 4;

// parser.h
/** enum NMS_KIND */
public static final int
    DEFAULT_NMS = 0, GREEDY_NMS = 1, DIOU_NMS = 2, CORNERS_NMS = 3;

// parser.h
/** enum YOLO_POINT */
public static final int
    YOLO_CENTER = 1 << 0, YOLO_LEFT_TOP = 1 << 1, YOLO_RIGHT_BOTTOM = 1 << 2;


// image.h
/** enum IMTYPE */
public static final int
    PNG = 0, BMP = 1, TGA = 2, JPG = 3;

// activations.h
/** enum BINARY_ACTIVATION */
public static final int
    MULT = 0, ADD = 1, SUB = 2, DIV = 3;

// layer.h
/** enum LAYER_TYPE */
public static final int
    CONVOLUTIONAL = 0,
    DECONVOLUTIONAL = 1,
    CONNECTED = 2,
    MAXPOOL = 3,
    SOFTMAX = 4,
    DETECTION = 5,
    DROPOUT = 6,
    CROP = 7,
    ROUTE = 8,
    COST = 9,
    NORMALIZATION = 10,
    AVGPOOL = 11,
    LOCAL = 12,
    SHORTCUT = 13,
    SCALE_CHANNELS = 14,
    SAM = 15,
    ACTIVE = 16,
    RNN = 17,
    GRU = 18,
    LSTM = 19,
    CONV_LSTM = 20,
    CRNN = 21,
    BATCHNORM = 22,
    NETWORK = 23,
    XNOR = 24,
    REGION = 25,
    YOLO = 26,
    GAUSSIAN_YOLO = 27,
    ISEG = 28,
    REORG = 29,
    REORG_OLD = 30,
    UPSAMPLE = 31,
    LOGXENT = 32,
    L2NORM = 33,
    EMPTY = 34,
    BLANK = 35;

// layer.h
/** enum COST_TYPE */
public static final int
    SSE = 0, MASKED = 1, L1 = 2, SEG = 3, SMOOTH = 4,WGAN = 5;

// layer.h
public static class update_args extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public update_args() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public update_args(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public update_args(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public update_args position(long position) {
        return (update_args)super.position(position);
    }

    public native int batch(); public native update_args batch(int setter);
    public native float learning_rate(); public native update_args learning_rate(float setter);
    public native float momentum(); public native update_args momentum(float setter);
    public native float decay(); public native update_args decay(float setter);
    public native int adam(); public native update_args adam(int setter);
    public native float B1(); public native update_args B1(float setter);
    public native float B2(); public native update_args B2(float setter);
    public native float eps(); public native update_args eps(float setter);
    public native int t(); public native update_args t(int setter);
}

// layer.h
public static class layer extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public layer() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public layer(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public layer(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public layer position(long position) {
        return (layer)super.position(position);
    }

    public native @Cast("LAYER_TYPE") int type(); public native layer type(int setter);
    public native @Cast("ACTIVATION") int activation(); public native layer activation(int setter);
    public native @Cast("COST_TYPE") int cost_type(); public native layer cost_type(int setter);
    public static class Forward_layer_network_state extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Forward_layer_network_state(Pointer p) { super(p); }
        protected Forward_layer_network_state() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, @ByVal network_state arg1);
    }
    public native Forward_layer_network_state forward(); public native layer forward(Forward_layer_network_state setter);
    public static class Backward_layer_network_state extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Backward_layer_network_state(Pointer p) { super(p); }
        protected Backward_layer_network_state() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, @ByVal network_state arg1);
    }
    public native Backward_layer_network_state backward(); public native layer backward(Backward_layer_network_state setter);
    public static class Update_layer_int_float_float_float extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Update_layer_int_float_float_float(Pointer p) { super(p); }
        protected Update_layer_int_float_float_float() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, int arg1, float arg2, float arg3, float arg4);
    }
    public native Update_layer_int_float_float_float update(); public native layer update(Update_layer_int_float_float_float setter);
    public static class Forward_gpu_layer_network_state extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Forward_gpu_layer_network_state(Pointer p) { super(p); }
        protected Forward_gpu_layer_network_state() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, @ByVal network_state arg1);
    }
    public native Forward_gpu_layer_network_state forward_gpu(); public native layer forward_gpu(Forward_gpu_layer_network_state setter);
    public static class Backward_gpu_layer_network_state extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Backward_gpu_layer_network_state(Pointer p) { super(p); }
        protected Backward_gpu_layer_network_state() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, @ByVal network_state arg1);
    }
    public native Backward_gpu_layer_network_state backward_gpu(); public native layer backward_gpu(Backward_gpu_layer_network_state setter);
    public static class Update_gpu_layer_int_float_float_float extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Update_gpu_layer_int_float_float_float(Pointer p) { super(p); }
        protected Update_gpu_layer_int_float_float_float() { allocate(); }
        private native void allocate();
        public native void call(@ByVal layer arg0, int arg1, float arg2, float arg3, float arg4);
    }
    public native Update_gpu_layer_int_float_float_float update_gpu(); public native layer update_gpu(Update_gpu_layer_int_float_float_float setter);
    public native layer share_layer(); public native layer share_layer(layer setter);
    public native int train(); public native layer train(int setter);
    public native int batch_normalize(); public native layer batch_normalize(int setter);
    public native int shortcut(); public native layer shortcut(int setter);
    public native int batch(); public native layer batch(int setter);
    public native int forced(); public native layer forced(int setter);
    public native int flipped(); public native layer flipped(int setter);
    public native int inputs(); public native layer inputs(int setter);
    public native int outputs(); public native layer outputs(int setter);
    public native int nweights(); public native layer nweights(int setter);
    public native int nbiases(); public native layer nbiases(int setter);
    public native int extra(); public native layer extra(int setter);
    public native int truths(); public native layer truths(int setter);
    public native int h(); public native layer h(int setter);
    public native int w(); public native layer w(int setter);
    public native int c(); public native layer c(int setter);
    public native int out_h(); public native layer out_h(int setter);
    public native int out_w(); public native layer out_w(int setter);
    public native int out_c(); public native layer out_c(int setter);
    public native int n(); public native layer n(int setter);
    public native int max_boxes(); public native layer max_boxes(int setter);
    public native int groups(); public native layer groups(int setter);
    public native int group_id(); public native layer group_id(int setter);
    public native int size(); public native layer size(int setter);
    public native int side(); public native layer side(int setter);
    public native int stride(); public native layer stride(int setter);
    public native int stride_x(); public native layer stride_x(int setter);
    public native int stride_y(); public native layer stride_y(int setter);
    public native int dilation(); public native layer dilation(int setter);
    public native int antialiasing(); public native layer antialiasing(int setter);
    public native int maxpool_depth(); public native layer maxpool_depth(int setter);
    public native int out_channels(); public native layer out_channels(int setter);
    public native int reverse(); public native layer reverse(int setter);
    public native int flatten(); public native layer flatten(int setter);
    public native int spatial(); public native layer spatial(int setter);
    public native int pad(); public native layer pad(int setter);
    public native int sqrt(); public native layer sqrt(int setter);
    public native int flip(); public native layer flip(int setter);
    public native int index(); public native layer index(int setter);
    public native int scale_wh(); public native layer scale_wh(int setter);
    public native int binary(); public native layer binary(int setter);
    public native int xnor(); public native layer xnor(int setter);
    public native int peephole(); public native layer peephole(int setter);
    public native int use_bin_output(); public native layer use_bin_output(int setter);
    public native int keep_delta_gpu(); public native layer keep_delta_gpu(int setter);
    public native int optimized_memory(); public native layer optimized_memory(int setter);
    public native int steps(); public native layer steps(int setter);
    public native int state_constrain(); public native layer state_constrain(int setter);
    public native int hidden(); public native layer hidden(int setter);
    public native int truth(); public native layer truth(int setter);
    public native float smooth(); public native layer smooth(float setter);
    public native float dot(); public native layer dot(float setter);
    public native int deform(); public native layer deform(int setter);
    public native int sway(); public native layer sway(int setter);
    public native int rotate(); public native layer rotate(int setter);
    public native int stretch(); public native layer stretch(int setter);
    public native float angle(); public native layer angle(float setter);
    public native float jitter(); public native layer jitter(float setter);
    public native float saturation(); public native layer saturation(float setter);
    public native float exposure(); public native layer exposure(float setter);
    public native float shift(); public native layer shift(float setter);
    public native float ratio(); public native layer ratio(float setter);
    public native float learning_rate_scale(); public native layer learning_rate_scale(float setter);
    public native float clip(); public native layer clip(float setter);
    public native int focal_loss(); public native layer focal_loss(int setter);
    public native FloatPointer classes_multipliers(); public native layer classes_multipliers(FloatPointer setter);
    public native float label_smooth_eps(); public native layer label_smooth_eps(float setter);
    public native int noloss(); public native layer noloss(int setter);
    public native int softmax(); public native layer softmax(int setter);
    public native int classes(); public native layer classes(int setter);
    public native int coords(); public native layer coords(int setter);
    public native int background(); public native layer background(int setter);
    public native int rescore(); public native layer rescore(int setter);
    public native int objectness(); public native layer objectness(int setter);
    public native int does_cost(); public native layer does_cost(int setter);
    public native int joint(); public native layer joint(int setter);
    public native int noadjust(); public native layer noadjust(int setter);
    public native int reorg(); public native layer reorg(int setter);
    public native int log(); public native layer log(int setter);
    public native int tanh(); public native layer tanh(int setter);
    public native IntPointer mask(); public native layer mask(IntPointer setter);
    public native int total(); public native layer total(int setter);
    public native float bflops(); public native layer bflops(float setter);

    public native int adam(); public native layer adam(int setter);
    public native float B1(); public native layer B1(float setter);
    public native float B2(); public native layer B2(float setter);
    public native float eps(); public native layer eps(float setter);

    public native int t(); public native layer t(int setter);

    public native float alpha(); public native layer alpha(float setter);
    public native float beta(); public native layer beta(float setter);
    public native float kappa(); public native layer kappa(float setter);

    public native float coord_scale(); public native layer coord_scale(float setter);
    public native float object_scale(); public native layer object_scale(float setter);
    public native float noobject_scale(); public native layer noobject_scale(float setter);
    public native float mask_scale(); public native layer mask_scale(float setter);
    public native float class_scale(); public native layer class_scale(float setter);
    public native int bias_match(); public native layer bias_match(int setter);
    public native int random(); public native layer random(int setter);
    public native float ignore_thresh(); public native layer ignore_thresh(float setter);
    public native float truth_thresh(); public native layer truth_thresh(float setter);
    public native float iou_thresh(); public native layer iou_thresh(float setter);
    public native float thresh(); public native layer thresh(float setter);
    public native float focus(); public native layer focus(float setter);
    public native int classfix(); public native layer classfix(int setter);
    public native int absolute(); public native layer absolute(int setter);
    public native int assisted_excitation(); public native layer assisted_excitation(int setter);

    public native int onlyforward(); public native layer onlyforward(int setter);
    public native int stopbackward(); public native layer stopbackward(int setter);
    public native int dontload(); public native layer dontload(int setter);
    public native int dontsave(); public native layer dontsave(int setter);
    public native int dontloadscales(); public native layer dontloadscales(int setter);
    public native int numload(); public native layer numload(int setter);

    public native float temperature(); public native layer temperature(float setter);
    public native float probability(); public native layer probability(float setter);
    public native float dropblock_size_rel(); public native layer dropblock_size_rel(float setter);
    public native int dropblock_size_abs(); public native layer dropblock_size_abs(int setter);
    public native int dropblock(); public native layer dropblock(int setter);
    public native float scale(); public native layer scale(float setter);

    public native @Cast("char*") BytePointer cweights(); public native layer cweights(BytePointer setter);
    public native IntPointer indexes(); public native layer indexes(IntPointer setter);
    public native IntPointer input_layers(); public native layer input_layers(IntPointer setter);
    public native IntPointer input_sizes(); public native layer input_sizes(IntPointer setter);
    public native IntPointer map(); public native layer map(IntPointer setter);
    public native IntPointer counts(); public native layer counts(IntPointer setter);
    public native FloatPointer sums(int i); public native layer sums(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer sums(); public native layer sums(PointerPointer setter);
    public native FloatPointer rand(); public native layer rand(FloatPointer setter);
    public native FloatPointer cost(); public native layer cost(FloatPointer setter);
    public native FloatPointer state(); public native layer state(FloatPointer setter);
    public native FloatPointer prev_state(); public native layer prev_state(FloatPointer setter);
    public native FloatPointer forgot_state(); public native layer forgot_state(FloatPointer setter);
    public native FloatPointer forgot_delta(); public native layer forgot_delta(FloatPointer setter);
    public native FloatPointer state_delta(); public native layer state_delta(FloatPointer setter);
    public native FloatPointer combine_cpu(); public native layer combine_cpu(FloatPointer setter);
    public native FloatPointer combine_delta_cpu(); public native layer combine_delta_cpu(FloatPointer setter);

    public native FloatPointer concat(); public native layer concat(FloatPointer setter);
    public native FloatPointer concat_delta(); public native layer concat_delta(FloatPointer setter);

    public native FloatPointer binary_weights(); public native layer binary_weights(FloatPointer setter);

    public native FloatPointer biases(); public native layer biases(FloatPointer setter);
    public native FloatPointer bias_updates(); public native layer bias_updates(FloatPointer setter);

    public native FloatPointer scales(); public native layer scales(FloatPointer setter);
    public native FloatPointer scale_updates(); public native layer scale_updates(FloatPointer setter);

    public native FloatPointer weights(); public native layer weights(FloatPointer setter);
    public native FloatPointer weight_updates(); public native layer weight_updates(FloatPointer setter);

    public native float scale_x_y(); public native layer scale_x_y(float setter);
    public native float uc_normalizer(); public native layer uc_normalizer(float setter);
    public native float iou_normalizer(); public native layer iou_normalizer(float setter);
    public native float cls_normalizer(); public native layer cls_normalizer(float setter);
    public native @Cast("IOU_LOSS") int iou_loss(); public native layer iou_loss(int setter);
    public native @Cast("NMS_KIND") int nms_kind(); public native layer nms_kind(int setter);
    public native float beta_nms(); public native layer beta_nms(float setter);
    public native @Cast("YOLO_POINT") int yolo_point(); public native layer yolo_point(int setter);

    public native @Cast("char*") BytePointer align_bit_weights_gpu(); public native layer align_bit_weights_gpu(BytePointer setter);
    public native FloatPointer mean_arr_gpu(); public native layer mean_arr_gpu(FloatPointer setter);
    public native FloatPointer align_workspace_gpu(); public native layer align_workspace_gpu(FloatPointer setter);
    public native FloatPointer transposed_align_workspace_gpu(); public native layer transposed_align_workspace_gpu(FloatPointer setter);
    public native int align_workspace_size(); public native layer align_workspace_size(int setter);

    public native @Cast("char*") BytePointer align_bit_weights(); public native layer align_bit_weights(BytePointer setter);
    public native FloatPointer mean_arr(); public native layer mean_arr(FloatPointer setter);
    public native int align_bit_weights_size(); public native layer align_bit_weights_size(int setter);
    public native int lda_align(); public native layer lda_align(int setter);
    public native int new_lda(); public native layer new_lda(int setter);
    public native int bit_align(); public native layer bit_align(int setter);

    public native FloatPointer col_image(); public native layer col_image(FloatPointer setter);
    public native FloatPointer delta(); public native layer delta(FloatPointer setter);
    public native FloatPointer output(); public native layer output(FloatPointer setter);
    public native FloatPointer activation_input(); public native layer activation_input(FloatPointer setter);
    public native int delta_pinned(); public native layer delta_pinned(int setter);
    public native int output_pinned(); public native layer output_pinned(int setter);
    public native FloatPointer loss(); public native layer loss(FloatPointer setter);
    public native FloatPointer squared(); public native layer squared(FloatPointer setter);
    public native FloatPointer norms(); public native layer norms(FloatPointer setter);

    public native FloatPointer spatial_mean(); public native layer spatial_mean(FloatPointer setter);
    public native FloatPointer mean(); public native layer mean(FloatPointer setter);
    public native FloatPointer variance(); public native layer variance(FloatPointer setter);

    public native FloatPointer mean_delta(); public native layer mean_delta(FloatPointer setter);
    public native FloatPointer variance_delta(); public native layer variance_delta(FloatPointer setter);

    public native FloatPointer rolling_mean(); public native layer rolling_mean(FloatPointer setter);
    public native FloatPointer rolling_variance(); public native layer rolling_variance(FloatPointer setter);

    public native FloatPointer x(); public native layer x(FloatPointer setter);
    public native FloatPointer x_norm(); public native layer x_norm(FloatPointer setter);

    public native FloatPointer m(); public native layer m(FloatPointer setter);
    public native FloatPointer v(); public native layer v(FloatPointer setter);

    public native FloatPointer bias_m(); public native layer bias_m(FloatPointer setter);
    public native FloatPointer bias_v(); public native layer bias_v(FloatPointer setter);
    public native FloatPointer scale_m(); public native layer scale_m(FloatPointer setter);
    public native FloatPointer scale_v(); public native layer scale_v(FloatPointer setter);


    public native FloatPointer z_cpu(); public native layer z_cpu(FloatPointer setter);
    public native FloatPointer r_cpu(); public native layer r_cpu(FloatPointer setter);
    public native FloatPointer h_cpu(); public native layer h_cpu(FloatPointer setter);
    public native FloatPointer stored_h_cpu(); public native layer stored_h_cpu(FloatPointer setter);
    public native FloatPointer prev_state_cpu(); public native layer prev_state_cpu(FloatPointer setter);

    public native FloatPointer temp_cpu(); public native layer temp_cpu(FloatPointer setter);
    public native FloatPointer temp2_cpu(); public native layer temp2_cpu(FloatPointer setter);
    public native FloatPointer temp3_cpu(); public native layer temp3_cpu(FloatPointer setter);

    public native FloatPointer dh_cpu(); public native layer dh_cpu(FloatPointer setter);
    public native FloatPointer hh_cpu(); public native layer hh_cpu(FloatPointer setter);
    public native FloatPointer prev_cell_cpu(); public native layer prev_cell_cpu(FloatPointer setter);
    public native FloatPointer cell_cpu(); public native layer cell_cpu(FloatPointer setter);
    public native FloatPointer f_cpu(); public native layer f_cpu(FloatPointer setter);
    public native FloatPointer i_cpu(); public native layer i_cpu(FloatPointer setter);
    public native FloatPointer g_cpu(); public native layer g_cpu(FloatPointer setter);
    public native FloatPointer o_cpu(); public native layer o_cpu(FloatPointer setter);
    public native FloatPointer c_cpu(); public native layer c_cpu(FloatPointer setter);
    public native FloatPointer stored_c_cpu(); public native layer stored_c_cpu(FloatPointer setter);
    public native FloatPointer dc_cpu(); public native layer dc_cpu(FloatPointer setter);

    public native FloatPointer binary_input(); public native layer binary_input(FloatPointer setter);
    public native @Cast("uint32_t*") IntPointer bin_re_packed_input(); public native layer bin_re_packed_input(IntPointer setter);
    public native @Cast("char*") BytePointer t_bit_input(); public native layer t_bit_input(BytePointer setter);

    public native layer input_layer(); public native layer input_layer(layer setter);
    public native layer self_layer(); public native layer self_layer(layer setter);
    public native layer output_layer(); public native layer output_layer(layer setter);

    public native layer reset_layer(); public native layer reset_layer(layer setter);
    public native layer update_layer(); public native layer update_layer(layer setter);
    public native layer state_layer(); public native layer state_layer(layer setter);

    public native layer input_gate_layer(); public native layer input_gate_layer(layer setter);
    public native layer state_gate_layer(); public native layer state_gate_layer(layer setter);
    public native layer input_save_layer(); public native layer input_save_layer(layer setter);
    public native layer state_save_layer(); public native layer state_save_layer(layer setter);
    public native layer input_state_layer(); public native layer input_state_layer(layer setter);
    public native layer state_state_layer(); public native layer state_state_layer(layer setter);

    public native layer input_z_layer(); public native layer input_z_layer(layer setter);
    public native layer state_z_layer(); public native layer state_z_layer(layer setter);

    public native layer input_r_layer(); public native layer input_r_layer(layer setter);
    public native layer state_r_layer(); public native layer state_r_layer(layer setter);

    public native layer input_h_layer(); public native layer input_h_layer(layer setter);
    public native layer state_h_layer(); public native layer state_h_layer(layer setter);

    public native layer wz(); public native layer wz(layer setter);
    public native layer uz(); public native layer uz(layer setter);
    public native layer wr(); public native layer wr(layer setter);
    public native layer ur(); public native layer ur(layer setter);
    public native layer wh(); public native layer wh(layer setter);
    public native layer uh(); public native layer uh(layer setter);
    public native layer uo(); public native layer uo(layer setter);
    public native layer wo(); public native layer wo(layer setter);
    public native layer vo(); public native layer vo(layer setter);
    public native layer uf(); public native layer uf(layer setter);
    public native layer wf(); public native layer wf(layer setter);
    public native layer vf(); public native layer vf(layer setter);
    public native layer ui(); public native layer ui(layer setter);
    public native layer wi(); public native layer wi(layer setter);
    public native layer vi(); public native layer vi(layer setter);
    public native layer ug(); public native layer ug(layer setter);
    public native layer wg(); public native layer wg(layer setter);

    public native tree softmax_tree(); public native layer softmax_tree(tree setter);

    public native @Cast("size_t") long workspace_size(); public native layer workspace_size(long setter);

// #ifdef GPU
    public native IntPointer indexes_gpu(); public native layer indexes_gpu(IntPointer setter);

    public native FloatPointer z_gpu(); public native layer z_gpu(FloatPointer setter);
    public native FloatPointer r_gpu(); public native layer r_gpu(FloatPointer setter);
    public native FloatPointer h_gpu(); public native layer h_gpu(FloatPointer setter);
    public native FloatPointer stored_h_gpu(); public native layer stored_h_gpu(FloatPointer setter);

    public native FloatPointer temp_gpu(); public native layer temp_gpu(FloatPointer setter);
    public native FloatPointer temp2_gpu(); public native layer temp2_gpu(FloatPointer setter);
    public native FloatPointer temp3_gpu(); public native layer temp3_gpu(FloatPointer setter);

    public native FloatPointer dh_gpu(); public native layer dh_gpu(FloatPointer setter);
    public native FloatPointer hh_gpu(); public native layer hh_gpu(FloatPointer setter);
    public native FloatPointer prev_cell_gpu(); public native layer prev_cell_gpu(FloatPointer setter);
    public native FloatPointer prev_state_gpu(); public native layer prev_state_gpu(FloatPointer setter);
    public native FloatPointer last_prev_state_gpu(); public native layer last_prev_state_gpu(FloatPointer setter);
    public native FloatPointer last_prev_cell_gpu(); public native layer last_prev_cell_gpu(FloatPointer setter);
    public native FloatPointer cell_gpu(); public native layer cell_gpu(FloatPointer setter);
    public native FloatPointer f_gpu(); public native layer f_gpu(FloatPointer setter);
    public native FloatPointer i_gpu(); public native layer i_gpu(FloatPointer setter);
    public native FloatPointer g_gpu(); public native layer g_gpu(FloatPointer setter);
    public native FloatPointer o_gpu(); public native layer o_gpu(FloatPointer setter);
    public native FloatPointer c_gpu(); public native layer c_gpu(FloatPointer setter);
    public native FloatPointer stored_c_gpu(); public native layer stored_c_gpu(FloatPointer setter);
    public native FloatPointer dc_gpu(); public native layer dc_gpu(FloatPointer setter);

    // adam
    public native FloatPointer m_gpu(); public native layer m_gpu(FloatPointer setter);
    public native FloatPointer v_gpu(); public native layer v_gpu(FloatPointer setter);
    public native FloatPointer bias_m_gpu(); public native layer bias_m_gpu(FloatPointer setter);
    public native FloatPointer scale_m_gpu(); public native layer scale_m_gpu(FloatPointer setter);
    public native FloatPointer bias_v_gpu(); public native layer bias_v_gpu(FloatPointer setter);
    public native FloatPointer scale_v_gpu(); public native layer scale_v_gpu(FloatPointer setter);

    public native FloatPointer combine_gpu(); public native layer combine_gpu(FloatPointer setter);
    public native FloatPointer combine_delta_gpu(); public native layer combine_delta_gpu(FloatPointer setter);

    public native FloatPointer forgot_state_gpu(); public native layer forgot_state_gpu(FloatPointer setter);
    public native FloatPointer forgot_delta_gpu(); public native layer forgot_delta_gpu(FloatPointer setter);
    public native FloatPointer state_gpu(); public native layer state_gpu(FloatPointer setter);
    public native FloatPointer state_delta_gpu(); public native layer state_delta_gpu(FloatPointer setter);
    public native FloatPointer gate_gpu(); public native layer gate_gpu(FloatPointer setter);
    public native FloatPointer gate_delta_gpu(); public native layer gate_delta_gpu(FloatPointer setter);
    public native FloatPointer save_gpu(); public native layer save_gpu(FloatPointer setter);
    public native FloatPointer save_delta_gpu(); public native layer save_delta_gpu(FloatPointer setter);
    public native FloatPointer concat_gpu(); public native layer concat_gpu(FloatPointer setter);
    public native FloatPointer concat_delta_gpu(); public native layer concat_delta_gpu(FloatPointer setter);

    public native FloatPointer binary_input_gpu(); public native layer binary_input_gpu(FloatPointer setter);
    public native FloatPointer binary_weights_gpu(); public native layer binary_weights_gpu(FloatPointer setter);
    public native FloatPointer bin_conv_shortcut_in_gpu(); public native layer bin_conv_shortcut_in_gpu(FloatPointer setter);
    public native FloatPointer bin_conv_shortcut_out_gpu(); public native layer bin_conv_shortcut_out_gpu(FloatPointer setter);

    public native FloatPointer mean_gpu(); public native layer mean_gpu(FloatPointer setter);
    public native FloatPointer variance_gpu(); public native layer variance_gpu(FloatPointer setter);

    public native FloatPointer rolling_mean_gpu(); public native layer rolling_mean_gpu(FloatPointer setter);
    public native FloatPointer rolling_variance_gpu(); public native layer rolling_variance_gpu(FloatPointer setter);

    public native FloatPointer variance_delta_gpu(); public native layer variance_delta_gpu(FloatPointer setter);
    public native FloatPointer mean_delta_gpu(); public native layer mean_delta_gpu(FloatPointer setter);

    public native FloatPointer col_image_gpu(); public native layer col_image_gpu(FloatPointer setter);

    public native FloatPointer x_gpu(); public native layer x_gpu(FloatPointer setter);
    public native FloatPointer x_norm_gpu(); public native layer x_norm_gpu(FloatPointer setter);
    public native FloatPointer weights_gpu(); public native layer weights_gpu(FloatPointer setter);
    public native FloatPointer weight_updates_gpu(); public native layer weight_updates_gpu(FloatPointer setter);
    public native FloatPointer weight_deform_gpu(); public native layer weight_deform_gpu(FloatPointer setter);
    public native FloatPointer weight_change_gpu(); public native layer weight_change_gpu(FloatPointer setter);

    public native FloatPointer weights_gpu16(); public native layer weights_gpu16(FloatPointer setter);
    public native FloatPointer weight_updates_gpu16(); public native layer weight_updates_gpu16(FloatPointer setter);

    public native FloatPointer biases_gpu(); public native layer biases_gpu(FloatPointer setter);
    public native FloatPointer bias_updates_gpu(); public native layer bias_updates_gpu(FloatPointer setter);
    public native FloatPointer bias_change_gpu(); public native layer bias_change_gpu(FloatPointer setter);

    public native FloatPointer scales_gpu(); public native layer scales_gpu(FloatPointer setter);
    public native FloatPointer scale_updates_gpu(); public native layer scale_updates_gpu(FloatPointer setter);
    public native FloatPointer scale_change_gpu(); public native layer scale_change_gpu(FloatPointer setter);

    public native FloatPointer input_antialiasing_gpu(); public native layer input_antialiasing_gpu(FloatPointer setter);
    public native FloatPointer output_gpu(); public native layer output_gpu(FloatPointer setter);
    public native FloatPointer activation_input_gpu(); public native layer activation_input_gpu(FloatPointer setter);
    public native FloatPointer loss_gpu(); public native layer loss_gpu(FloatPointer setter);
    public native FloatPointer delta_gpu(); public native layer delta_gpu(FloatPointer setter);
    public native FloatPointer rand_gpu(); public native layer rand_gpu(FloatPointer setter);
    public native FloatPointer squared_gpu(); public native layer squared_gpu(FloatPointer setter);
    public native FloatPointer norms_gpu(); public native layer norms_gpu(FloatPointer setter);

    public native FloatPointer gt_gpu(); public native layer gt_gpu(FloatPointer setter);
    public native FloatPointer a_avg_gpu(); public native layer a_avg_gpu(FloatPointer setter);
// #ifdef CUDNN

// #endif  // CUDNN
// #endif  // GPU
}


// network.h
/** enum learning_rate_policy */
public static final int
    CONSTANT = 0, STEP = 1, EXP = 2, POLY = 3, STEPS = 4, SIG = 5, RANDOM = 6, SGDR = 7;

// network.h
public static class network extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public network() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public network(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public network(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public network position(long position) {
        return (network)super.position(position);
    }

    public native int n(); public native network n(int setter);
    public native int batch(); public native network batch(int setter);
    public native @Cast("uint64_t*") LongPointer seen(); public native network seen(LongPointer setter);
    public native IntPointer t(); public native network t(IntPointer setter);
    public native float epoch(); public native network epoch(float setter);
    public native int subdivisions(); public native network subdivisions(int setter);
    public native layer layers(); public native network layers(layer setter);
    public native FloatPointer output(); public native network output(FloatPointer setter);
    public native @Cast("learning_rate_policy") int policy(); public native network policy(int setter);

    public native float learning_rate(); public native network learning_rate(float setter);
    public native float learning_rate_min(); public native network learning_rate_min(float setter);
    public native float learning_rate_max(); public native network learning_rate_max(float setter);
    public native int batches_per_cycle(); public native network batches_per_cycle(int setter);
    public native int batches_cycle_mult(); public native network batches_cycle_mult(int setter);
    public native float momentum(); public native network momentum(float setter);
    public native float decay(); public native network decay(float setter);
    public native float gamma(); public native network gamma(float setter);
    public native float scale(); public native network scale(float setter);
    public native float power(); public native network power(float setter);
    public native int time_steps(); public native network time_steps(int setter);
    public native int step(); public native network step(int setter);
    public native int max_batches(); public native network max_batches(int setter);
    public native int num_boxes(); public native network num_boxes(int setter);
    public native int train_images_num(); public native network train_images_num(int setter);
    public native FloatPointer seq_scales(); public native network seq_scales(FloatPointer setter);
    public native FloatPointer scales(); public native network scales(FloatPointer setter);
    public native IntPointer steps(); public native network steps(IntPointer setter);
    public native int num_steps(); public native network num_steps(int setter);
    public native int burn_in(); public native network burn_in(int setter);
    public native int cudnn_half(); public native network cudnn_half(int setter);

    public native int adam(); public native network adam(int setter);
    public native float B1(); public native network B1(float setter);
    public native float B2(); public native network B2(float setter);
    public native float eps(); public native network eps(float setter);

    public native int inputs(); public native network inputs(int setter);
    public native int outputs(); public native network outputs(int setter);
    public native int truths(); public native network truths(int setter);
    public native int notruth(); public native network notruth(int setter);
    public native int h(); public native network h(int setter);
    public native int w(); public native network w(int setter);
    public native int c(); public native network c(int setter);
    public native int max_crop(); public native network max_crop(int setter);
    public native int min_crop(); public native network min_crop(int setter);
    public native float max_ratio(); public native network max_ratio(float setter);
    public native float min_ratio(); public native network min_ratio(float setter);
    public native int center(); public native network center(int setter);
    public native int flip(); public native network flip(int setter); // horizontal flip 50% probability augmentaiont for classifier training (default = 1)
    public native int blur(); public native network blur(int setter);
    public native int mixup(); public native network mixup(int setter);
    public native float label_smooth_eps(); public native network label_smooth_eps(float setter);
    public native int letter_box(); public native network letter_box(int setter);
    public native float angle(); public native network angle(float setter);
    public native float aspect(); public native network aspect(float setter);
    public native float exposure(); public native network exposure(float setter);
    public native float saturation(); public native network saturation(float setter);
    public native float hue(); public native network hue(float setter);
    public native int random(); public native network random(int setter);
    public native int track(); public native network track(int setter);
    public native int augment_speed(); public native network augment_speed(int setter);
    public native int sequential_subdivisions(); public native network sequential_subdivisions(int setter);
    public native int init_sequential_subdivisions(); public native network init_sequential_subdivisions(int setter);
    public native int current_subdivision(); public native network current_subdivision(int setter);
    public native int try_fix_nan(); public native network try_fix_nan(int setter);

    public native int gpu_index(); public native network gpu_index(int setter);
    public native tree hierarchy(); public native network hierarchy(tree setter);

    public native FloatPointer input(); public native network input(FloatPointer setter);
    public native FloatPointer truth(); public native network truth(FloatPointer setter);
    public native FloatPointer delta(); public native network delta(FloatPointer setter);
    public native FloatPointer workspace(); public native network workspace(FloatPointer setter);
    public native int train(); public native network train(int setter);
    public native int index(); public native network index(int setter);
    public native FloatPointer cost(); public native network cost(FloatPointer setter);
    public native float clip(); public native network clip(float setter);

// #ifdef GPU
    //float *input_gpu;
    //float *truth_gpu;
    public native FloatPointer delta_gpu(); public native network delta_gpu(FloatPointer setter);
    public native FloatPointer output_gpu(); public native network output_gpu(FloatPointer setter);

    public native FloatPointer input_state_gpu(); public native network input_state_gpu(FloatPointer setter);
    public native FloatPointer input_pinned_cpu(); public native network input_pinned_cpu(FloatPointer setter);
    public native int input_pinned_cpu_flag(); public native network input_pinned_cpu_flag(int setter);

    public native FloatPointer input_gpu(int i); public native network input_gpu(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer input_gpu(); public native network input_gpu(PointerPointer setter);
    public native FloatPointer truth_gpu(int i); public native network truth_gpu(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer truth_gpu(); public native network truth_gpu(PointerPointer setter);
    public native FloatPointer input16_gpu(int i); public native network input16_gpu(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer input16_gpu(); public native network input16_gpu(PointerPointer setter);
    public native FloatPointer output16_gpu(int i); public native network output16_gpu(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer output16_gpu(); public native network output16_gpu(PointerPointer setter);
    public native @Cast("size_t*") SizeTPointer max_input16_size(); public native network max_input16_size(SizeTPointer setter);
    public native @Cast("size_t*") SizeTPointer max_output16_size(); public native network max_output16_size(SizeTPointer setter);
    public native int wait_stream(); public native network wait_stream(int setter);

    public native FloatPointer global_delta_gpu(); public native network global_delta_gpu(FloatPointer setter);
    public native FloatPointer state_delta_gpu(); public native network state_delta_gpu(FloatPointer setter);
    public native @Cast("size_t") long max_delta_gpu_size(); public native network max_delta_gpu_size(long setter);
// #endif
    public native int optimized_memory(); public native network optimized_memory(int setter);
    public native @Cast("size_t") long workspace_size_limit(); public native network workspace_size_limit(long setter);
}

// network.h
public static class network_state extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public network_state() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public network_state(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public network_state(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public network_state position(long position) {
        return (network_state)super.position(position);
    }

    public native FloatPointer truth(); public native network_state truth(FloatPointer setter);
    public native FloatPointer input(); public native network_state input(FloatPointer setter);
    public native FloatPointer delta(); public native network_state delta(FloatPointer setter);
    public native FloatPointer workspace(); public native network_state workspace(FloatPointer setter);
    public native int train(); public native network_state train(int setter);
    public native int index(); public native network_state index(int setter);
    public native @ByRef network net(); public native network_state net(network setter);
}

//typedef struct {
//    int w;
//    int h;
//    float scale;
//    float rad;
//    float dx;
//    float dy;
//    float aspect;
//} augment_args;

// image.h
public static class image extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public image() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public image(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public image(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public image position(long position) {
        return (image)super.position(position);
    }

    public native int w(); public native image w(int setter);
    public native int h(); public native image h(int setter);
    public native int c(); public native image c(int setter);
    public native FloatPointer data(); public native image data(FloatPointer setter);
}

//typedef struct {
//    int w;
//    int h;
//    int c;
//    float *data;
//} image;

// box.h
public static class box extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public box() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public box(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public box(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public box position(long position) {
        return (box)super.position(position);
    }

    public native float x(); public native box x(float setter);
    public native float y(); public native box y(float setter);
    public native float w(); public native box w(float setter);
    public native float h(); public native box h(float setter);
}

// box.h
public static class boxabs extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public boxabs() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public boxabs(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public boxabs(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public boxabs position(long position) {
        return (boxabs)super.position(position);
    }

    public native float left(); public native boxabs left(float setter);
    public native float right(); public native boxabs right(float setter);
    public native float top(); public native boxabs top(float setter);
    public native float bot(); public native boxabs bot(float setter);
}

// box.h
public static class dxrep extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dxrep() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dxrep(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dxrep(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dxrep position(long position) {
        return (dxrep)super.position(position);
    }

    public native float dt(); public native dxrep dt(float setter);
    public native float db(); public native dxrep db(float setter);
    public native float dl(); public native dxrep dl(float setter);
    public native float dr(); public native dxrep dr(float setter);
}

// box.h
public static class ious extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ious() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ious(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ious(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ious position(long position) {
        return (ious)super.position(position);
    }

    public native float iou(); public native ious iou(float setter);
    public native float giou(); public native ious giou(float setter);
    public native float diou(); public native ious diou(float setter);
    public native float ciou(); public native ious ciou(float setter);
    public native @ByRef dxrep dx_iou(); public native ious dx_iou(dxrep setter);
    public native @ByRef dxrep dx_giou(); public native ious dx_giou(dxrep setter);
}


// box.h
public static class detection extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public detection() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public detection(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public detection(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public detection position(long position) {
        return (detection)super.position(position);
    }

    public native @ByRef box bbox(); public native detection bbox(box setter);
    public native int classes(); public native detection classes(int setter);
    public native FloatPointer prob(); public native detection prob(FloatPointer setter);
    public native FloatPointer mask(); public native detection mask(FloatPointer setter);
    public native float objectness(); public native detection objectness(float setter);
    public native int sort_class(); public native detection sort_class(int setter);
    public native FloatPointer uc(); public native detection uc(FloatPointer setter); // Gaussian_YOLOv3 - tx,ty,tw,th uncertainty
    public native int points(); public native detection points(int setter); // bit-0 - center, bit-1 - top-left-corner, bit-2 - bottom-right-corner
}

// matrix.h
public static class matrix extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public matrix() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public matrix(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public matrix(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public matrix position(long position) {
        return (matrix)super.position(position);
    }

    public native int rows(); public native matrix rows(int setter);
    public native int cols(); public native matrix cols(int setter);
    public native FloatPointer vals(int i); public native matrix vals(int i, FloatPointer setter);
    public native @Cast("float**") PointerPointer vals(); public native matrix vals(PointerPointer setter);
}

// data.h
public static class data extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public data() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public data(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public data(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public data position(long position) {
        return (data)super.position(position);
    }

    public native int w(); public native data w(int setter);
    public native int h(); public native data h(int setter);
    public native @ByRef matrix X(); public native data X(matrix setter);
    public native @ByRef matrix y(); public native data y(matrix setter);
    public native int shallow(); public native data shallow(int setter);
    public native IntPointer num_boxes(); public native data num_boxes(IntPointer setter);
    public native box boxes(int i); public native data boxes(int i, box setter);
    public native @Cast("box**") PointerPointer boxes(); public native data boxes(PointerPointer setter);
}

// data.h
/** enum data_type */
public static final int
    CLASSIFICATION_DATA = 0, DETECTION_DATA = 1, CAPTCHA_DATA = 2, REGION_DATA = 3, IMAGE_DATA = 4, COMPARE_DATA = 5, WRITING_DATA = 6, SWAG_DATA = 7, TAG_DATA = 8, OLD_CLASSIFICATION_DATA = 9, STUDY_DATA = 10, DET_DATA = 11, SUPER_DATA = 12, LETTERBOX_DATA = 13, REGRESSION_DATA = 14, SEGMENTATION_DATA = 15, INSTANCE_DATA = 16, ISEG_DATA = 17;

// data.h
public static class load_args extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public load_args() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public load_args(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public load_args(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public load_args position(long position) {
        return (load_args)super.position(position);
    }

    public native int threads(); public native load_args threads(int setter);
    public native @Cast("char*") BytePointer paths(int i); public native load_args paths(int i, BytePointer setter);
    public native @Cast("char**") PointerPointer paths(); public native load_args paths(PointerPointer setter);
    public native @Cast("char*") BytePointer path(); public native load_args path(BytePointer setter);
    public native int n(); public native load_args n(int setter);
    public native int m(); public native load_args m(int setter);
    public native @Cast("char*") BytePointer labels(int i); public native load_args labels(int i, BytePointer setter);
    public native @Cast("char**") PointerPointer labels(); public native load_args labels(PointerPointer setter);
    public native int h(); public native load_args h(int setter);
    public native int w(); public native load_args w(int setter);
    public native int c(); public native load_args c(int setter); // color depth
    public native int out_w(); public native load_args out_w(int setter);
    public native int out_h(); public native load_args out_h(int setter);
    public native int nh(); public native load_args nh(int setter);
    public native int nw(); public native load_args nw(int setter);
    public native int num_boxes(); public native load_args num_boxes(int setter);
    public native int min(); public native load_args min(int setter);
    public native int max(); public native load_args max(int setter);
    public native int size(); public native load_args size(int setter);
    public native int classes(); public native load_args classes(int setter);
    public native int background(); public native load_args background(int setter);
    public native int scale(); public native load_args scale(int setter);
    public native int center(); public native load_args center(int setter);
    public native int coords(); public native load_args coords(int setter);
    public native int mini_batch(); public native load_args mini_batch(int setter);
    public native int track(); public native load_args track(int setter);
    public native int augment_speed(); public native load_args augment_speed(int setter);
    public native int letter_box(); public native load_args letter_box(int setter);
    public native int show_imgs(); public native load_args show_imgs(int setter);
    public native float jitter(); public native load_args jitter(float setter);
    public native int flip(); public native load_args flip(int setter);
    public native int blur(); public native load_args blur(int setter);
    public native int mixup(); public native load_args mixup(int setter);
    public native float label_smooth_eps(); public native load_args label_smooth_eps(float setter);
    public native float angle(); public native load_args angle(float setter);
    public native float aspect(); public native load_args aspect(float setter);
    public native float saturation(); public native load_args saturation(float setter);
    public native float exposure(); public native load_args exposure(float setter);
    public native float hue(); public native load_args hue(float setter);
    public native data d(); public native load_args d(data setter);
    public native image im(); public native load_args im(image setter);
    public native image resized(); public native load_args resized(image setter);
    public native @Cast("data_type") int type(); public native load_args type(int setter);
    public native tree hierarchy(); public native load_args hierarchy(tree setter);
}

// data.h
public static class box_label extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public box_label() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public box_label(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public box_label(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public box_label position(long position) {
        return (box_label)super.position(position);
    }

    public native int id(); public native box_label id(int setter);
    public native float x(); public native box_label x(float setter);
    public native float y(); public native box_label y(float setter);
    public native float w(); public native box_label w(float setter);
    public native float h(); public native box_label h(float setter);
    public native float left(); public native box_label left(float setter);
    public native float right(); public native box_label right(float setter);
    public native float top(); public native box_label top(float setter);
    public native float bottom(); public native box_label bottom(float setter);
}

// list.h
//typedef struct node {
//    void *val;
//    struct node *next;
//    struct node *prev;
//} node;

// list.h
//typedef struct list {
//    int size;
//    node *front;
//    node *back;
//} list;

// -----------------------------------------------------


// parser.c
public static native IntPointer load_network(@Cast("char*") BytePointer cfg, @Cast("char*") BytePointer weights, int clear);
public static native IntBuffer load_network(@Cast("char*") ByteBuffer cfg, @Cast("char*") ByteBuffer weights, int clear);
public static native int[] load_network(@Cast("char*") byte[] cfg, @Cast("char*") byte[] weights, int clear);
public static native IntPointer load_network_custom(@Cast("char*") BytePointer cfg, @Cast("char*") BytePointer weights, int clear, int batch);
public static native IntBuffer load_network_custom(@Cast("char*") ByteBuffer cfg, @Cast("char*") ByteBuffer weights, int clear, int batch);
public static native int[] load_network_custom(@Cast("char*") byte[] cfg, @Cast("char*") byte[] weights, int clear, int batch);

// network.c
public static native int get_base_args(network net);

// box.h
public static native int do_nms_sort(detection dets, int total, int classes, float thresh);
public static native int do_nms_obj(detection dets, int total, int classes, float thresh);
public static native int diounms_sort(detection dets, int total, int classes, float thresh, @Cast("NMS_KIND") int nms_kind, float beta1);

// network.h
public static native IntPointer network_predict(@ByVal network net, FloatPointer input);
public static native IntBuffer network_predict(@ByVal network net, FloatBuffer input);
public static native int[] network_predict(@ByVal network net, float[] input);
public static native IntPointer network_predict_ptr(network net, FloatPointer input);
public static native IntBuffer network_predict_ptr(network net, FloatBuffer input);
public static native int[] network_predict_ptr(network net, float[] input);
public static native IntPointer get_network_boxes(network net, int w, int h, float thresh, float hier, IntPointer map, int relative, IntPointer num, int letter);
public static native IntBuffer get_network_boxes(network net, int w, int h, float thresh, float hier, IntBuffer map, int relative, IntBuffer num, int letter);
public static native int[] get_network_boxes(network net, int w, int h, float thresh, float hier, int[] map, int relative, int[] num, int letter);
public static native int free_detections(detection dets, int n);
public static native int fuse_conv_batchnorm(@ByVal network net);
public static native int calculate_binary_weights(@ByVal network net);
public static native IntPointer detection_to_json(detection dets, int nboxes, int classes, @Cast("char**") PointerPointer names, long frame_id, @Cast("char*") BytePointer filename);
public static native IntPointer detection_to_json(detection dets, int nboxes, int classes, @Cast("char**") @ByPtrPtr BytePointer names, long frame_id, @Cast("char*") BytePointer filename);
public static native IntBuffer detection_to_json(detection dets, int nboxes, int classes, @Cast("char**") @ByPtrPtr ByteBuffer names, long frame_id, @Cast("char*") ByteBuffer filename);
public static native int[] detection_to_json(detection dets, int nboxes, int classes, @Cast("char**") @ByPtrPtr byte[] names, long frame_id, @Cast("char*") byte[] filename);

public static native IntPointer get_network_layer(network net, int i);
//LIB_API detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num, int letter);
public static native IntPointer make_network_boxes(network net, float thresh, IntPointer num);
public static native IntBuffer make_network_boxes(network net, float thresh, IntBuffer num);
public static native int[] make_network_boxes(network net, float thresh, int[] num);
public static native int reset_rnn(network net);
public static native IntPointer network_predict_image(network net, @ByVal image im);
public static native IntPointer network_predict_image_letterbox(network net, @ByVal image im);
public static native int validate_detector_map(@Cast("char*") BytePointer datacfg, @Cast("char*") BytePointer cfgfile, @Cast("char*") BytePointer weightfile, float thresh_calc_avg_iou, float iou_thresh, int map_points, int letter_box, network existing_net);
public static native int validate_detector_map(@Cast("char*") ByteBuffer datacfg, @Cast("char*") ByteBuffer cfgfile, @Cast("char*") ByteBuffer weightfile, float thresh_calc_avg_iou, float iou_thresh, int map_points, int letter_box, network existing_net);
public static native int validate_detector_map(@Cast("char*") byte[] datacfg, @Cast("char*") byte[] cfgfile, @Cast("char*") byte[] weightfile, float thresh_calc_avg_iou, float iou_thresh, int map_points, int letter_box, network existing_net);
public static native int train_detector(@Cast("char*") BytePointer datacfg, @Cast("char*") BytePointer cfgfile, @Cast("char*") BytePointer weightfile, IntPointer gpus, int ngpus, int clear, int dont_show, int calc_map, int mjpeg_port, int show_imgs);
public static native int train_detector(@Cast("char*") ByteBuffer datacfg, @Cast("char*") ByteBuffer cfgfile, @Cast("char*") ByteBuffer weightfile, IntBuffer gpus, int ngpus, int clear, int dont_show, int calc_map, int mjpeg_port, int show_imgs);
public static native int train_detector(@Cast("char*") byte[] datacfg, @Cast("char*") byte[] cfgfile, @Cast("char*") byte[] weightfile, int[] gpus, int ngpus, int clear, int dont_show, int calc_map, int mjpeg_port, int show_imgs);
public static native int test_detector(@Cast("char*") BytePointer datacfg, @Cast("char*") BytePointer cfgfile, @Cast("char*") BytePointer weightfile, @Cast("char*") BytePointer filename, float thresh,
    float hier_thresh, int dont_show, int ext_output, int save_labels, @Cast("char*") BytePointer outfile, int letter_box);
public static native int test_detector(@Cast("char*") ByteBuffer datacfg, @Cast("char*") ByteBuffer cfgfile, @Cast("char*") ByteBuffer weightfile, @Cast("char*") ByteBuffer filename, float thresh,
    float hier_thresh, int dont_show, int ext_output, int save_labels, @Cast("char*") ByteBuffer outfile, int letter_box);
public static native int test_detector(@Cast("char*") byte[] datacfg, @Cast("char*") byte[] cfgfile, @Cast("char*") byte[] weightfile, @Cast("char*") byte[] filename, float thresh,
    float hier_thresh, int dont_show, int ext_output, int save_labels, @Cast("char*") byte[] outfile, int letter_box);
public static native int network_width(network net);
public static native int network_height(network net);
public static native int optimize_picture(network net, @ByVal image orig, int max_layer, float scale, float rate, float thresh, int norm);

// image.h
public static native int resize_image(@ByVal image im, int w, int h);
public static native int copy_image_from_bytes(@ByVal image im, @Cast("char*") BytePointer pdata);
public static native int copy_image_from_bytes(@ByVal image im, @Cast("char*") ByteBuffer pdata);
public static native int copy_image_from_bytes(@ByVal image im, @Cast("char*") byte[] pdata);
public static native int letterbox_image(@ByVal image im, int w, int h);
public static native int rgbgr_image(@ByVal image im);
public static native int make_image(int w, int h, int c);
public static native int load_image_color(@Cast("char*") BytePointer filename, int w, int h);
public static native int load_image_color(@Cast("char*") ByteBuffer filename, int w, int h);
public static native int load_image_color(@Cast("char*") byte[] filename, int w, int h);
public static native int free_image(@ByVal image m);

// layer.h
public static native int free_layer_custom(@ByVal layer l, int keep_cudnn_desc);
public static native int free_layer(@ByVal layer l);

// data.c
public static native int free_data(@ByVal data d);
public static native int load_data(@ByVal load_args args);
public static native int load_data_in_thread(@ByVal load_args args);
public static native IntPointer load_thread(Pointer ptr);

// dark_cuda.h
public static native int cuda_pull_array(FloatPointer x_gpu, FloatPointer x, @Cast("size_t") long n);
public static native int cuda_pull_array(FloatBuffer x_gpu, FloatBuffer x, @Cast("size_t") long n);
public static native int cuda_pull_array(float[] x_gpu, float[] x, @Cast("size_t") long n);
public static native int cuda_pull_array_async(FloatPointer x_gpu, FloatPointer x, @Cast("size_t") long n);
public static native int cuda_pull_array_async(FloatBuffer x_gpu, FloatBuffer x, @Cast("size_t") long n);
public static native int cuda_pull_array_async(float[] x_gpu, float[] x, @Cast("size_t") long n);
public static native int cuda_set_device(int n);
public static native IntPointer cuda_get_context();

// utils.h
public static native int free_ptrs(@Cast("void**") PointerPointer ptrs, int n);
public static native int free_ptrs(@Cast("void**") @ByPtrPtr Pointer ptrs, int n);
public static native int top_k(FloatPointer a, int n, int k, IntPointer index);
public static native int top_k(FloatBuffer a, int n, int k, IntBuffer index);
public static native int top_k(float[] a, int n, int k, int[] index);

// tree.h
public static native IntPointer read_tree(@Cast("char*") BytePointer filename);
public static native IntBuffer read_tree(@Cast("char*") ByteBuffer filename);
public static native int[] read_tree(@Cast("char*") byte[] filename);

// option_list.h
public static native int get_metadata(@Cast("char*") BytePointer file);
public static native int get_metadata(@Cast("char*") ByteBuffer file);
public static native int get_metadata(@Cast("char*") byte[] file);


// http_stream.h
public static native int delete_json_sender();
public static native int send_json_custom(@Cast("const char*") BytePointer send_buf, int port, int timeout);
public static native int send_json_custom(String send_buf, int port, int timeout);
public static native int get_time_point();
public static native void start_timer();
public static native void stop_timer();
public static native double get_time();
public static native void stop_timer_and_show();
public static native void stop_timer_and_show_name(@Cast("char*") BytePointer name);
public static native void stop_timer_and_show_name(@Cast("char*") ByteBuffer name);
public static native void stop_timer_and_show_name(@Cast("char*") byte[] name);
public static native void show_total_time();

// gemm.h
public static native int init_cpu();

// #ifdef __cplusplus
// #endif  // __cplusplus
// #endif  // DARKNET_API


// Parsed from yolo_v2_class.hpp

// #ifndef YOLO_V2_CLASS_HPP
// #define YOLO_V2_CLASS_HPP

// #ifndef LIB_API
// #endif

public static final int C_SHARP_MAX_OBJECTS = 1000;

public static class bbox_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public bbox_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public bbox_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public bbox_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public bbox_t position(long position) {
        return (bbox_t)super.position(position);
    }

    public native @Cast("unsigned int") int x(); public native bbox_t x(int setter);
    public native @Cast("unsigned int") int y(); public native bbox_t y(int setter);
    public native @Cast("unsigned int") int w(); public native bbox_t w(int setter);
    public native @Cast("unsigned int") int h(); public native bbox_t h(int setter);       // (x,y) - top-left corner, (w, h) - width & height of bounded box
    public native float prob(); public native bbox_t prob(float setter);                    // confidence - probability that the object was found correctly
    public native @Cast("unsigned int") int obj_id(); public native bbox_t obj_id(int setter);           // class of object - from range [0, classes-1]
    public native @Cast("unsigned int") int track_id(); public native bbox_t track_id(int setter);         // tracking id for video (0 - untracked, 1 - inf - tracked object)
    public native @Cast("unsigned int") int frames_counter(); public native bbox_t frames_counter(int setter);   // counter of frames on which the object was detected
    public native float x_3d(); public native bbox_t x_3d(float setter);
    public native float y_3d(); public native bbox_t y_3d(float setter);
    public native float z_3d(); public native bbox_t z_3d(float setter);        // center of object (in Meters) if ZED 3D Camera is used
}

public static class image_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public image_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public image_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public image_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public image_t position(long position) {
        return (image_t)super.position(position);
    }

    public native int h(); public native image_t h(int setter);                        // height
    public native int w(); public native image_t w(int setter);                        // width
    public native int c(); public native image_t c(int setter);                        // number of chanels (3 - for RGB)
    public native FloatPointer data(); public native image_t data(FloatPointer setter);                  // pointer to the image data
}

public static class bbox_t_container extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public bbox_t_container() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public bbox_t_container(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public bbox_t_container(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public bbox_t_container position(long position) {
        return (bbox_t_container)super.position(position);
    }

    public native @ByRef bbox_t candidates(int i); public native bbox_t_container candidates(int i, bbox_t setter);
    @MemberGetter public native bbox_t candidates();
}

// #ifdef __cplusplus
// #include <memory>
// #include <vector>
// #include <deque>
// #include <algorithm>
// #include <chrono>
// #include <string>
// #include <sstream>
// #include <iostream>
// #include <cmath>

// #ifdef OPENCV
// #include <opencv2/opencv.hpp>            // C++
// #include <opencv2/highgui/highgui_c.h>   // C
// #include <opencv2/imgproc/imgproc_c.h>   // C
// #endif

public static native int init(@Cast("const char*") BytePointer configurationFilename, @Cast("const char*") BytePointer weightsFilename, int gpu);
public static native int init(String configurationFilename, String weightsFilename, int gpu);
public static native int detect_image(@Cast("const char*") BytePointer filename, @ByRef bbox_t_container container);
public static native int detect_image(String filename, @ByRef bbox_t_container container);
public static native int detect_mat(@Cast("const uint8_t*") BytePointer data, @Cast("const size_t") long data_length, @ByRef bbox_t_container container);
public static native int detect_mat(@Cast("const uint8_t*") ByteBuffer data, @Cast("const size_t") long data_length, @ByRef bbox_t_container container);
public static native int detect_mat(@Cast("const uint8_t*") byte[] data, @Cast("const size_t") long data_length, @ByRef bbox_t_container container);
public static native int dispose();
public static native int get_device_count();
public static native int get_device_name(int gpu, @Cast("char*") BytePointer deviceName);
public static native int get_device_name(int gpu, @Cast("char*") ByteBuffer deviceName);
public static native int get_device_name(int gpu, @Cast("char*") byte[] deviceName);
public static native int built_with_cuda();
public static native int built_with_cudnn();
public static native int built_with_opencv();

// --------------------------------------------------------------------------------


// #if defined(TRACK_OPTFLOW) && defined(OPENCV) && defined(GPU)

// #include <opencv2/cudaoptflow.hpp>
// #include <opencv2/cudaimgproc.hpp>
// #include <opencv2/cudaarithm.hpp>
// #include <opencv2/core/cuda.hpp>

// ----------------------------------------------
// #endif    // OPENCV

// #endif    // __cplusplus

// #endif    // YOLO_V2_CLASS_HPP


}
